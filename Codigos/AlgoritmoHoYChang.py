import time
start=time.time()
INF = float('inf')
nINF = float('-inf')

def firstLate(schedule):
	"""
	Entrada:Trabajos agendadados en la m√°quina k, tal que j‚ààœÉk.
	Salida: Indice del primer trabajo que viola el plazo de entrega en la m√°quina k.
	"""	
	ans,i,f = None,0,0
	while ans==None and i!=len(schedule):
		if f+schedule[i][2]<=schedule[i][1]: f += schedule[i][2]
		else: ans = i
		i += 1
	return ans

def computeValues(jobs, j, ans, minSlack): return (ans[j][0], minSlack[j], jobs[j][1]-ans[j][1])
"""
Entrada:Trabajos agendadados en la m√°quina k, indice j del trabajo, tiempos de incio y finalizaci√≥n de cada trabajo y tiempo 
		m√≠nimo de inactividad del trabajo j.
Salida: Tiempo de inicio bj, tiempo m√≠nimo de inactividad œàj y tiempo de inactividad [œï(Sk)]j del trabajo j.
"""	
def checkC1(di, bj, pi): return (di>=bj+pi)
"""
Entrada:Plazo de entrega di del trabajo i‚ààœÄ, tiempo de inicio bj del trabajo j‚ààœÉk y tiempo de procesamiento pi del trabajo i‚ààœÄ.
Salida: Cumple o no cumple la condici√≥n.
"""	
def checkC2(minimumSlack, pi, pj): return (minimumSlack>=pi-pj)
"""
Entrada:Tiempo m√≠nimo de inactividad œàj del trabajo j, tiempo de procesamiento pi del trabajo i‚ààœÄ y tiempo de procesamiento 
		pj del trabajo j‚ààœÉk.
Salida: Cumple o no cumple la condici√≥n.
"""	
def checkC3a(slackJob, di, bj, pi): return (slackJob> di-bj-pi)
"""
Entrada:Tiempo de inactividad [œï(Sk)]j del trabajo j, plazo de entrega di del trabajo i‚ààœÄ, tiempo de inicio bj del trabajo j‚ààœÉk 
		y tiempo de procesamiento pi del trabajo i‚ààœÄ.
Salida: Cumple o no cumple la condici√≥n.
"""	
def checkC3b(di, dj, pi, pj, jobCnt, j): return [(di>dj),(pi>pj),((pi-pj)*(jobCnt-j) > (di-dj))]
"""
Entrada:Plazo de entrega di del trabajo i‚ààœÄ y dj del trabajo j‚ààœÉk, tiempo de procesamiento pi del trabajo i‚ààœÄ y pj del trabajo j‚ààœÉk,
		n√∫mero de trabajos agendados a tiempo en la maquina k e indice j del trabajo.
Salida: Cumple o no cumple la condici√≥n.
"""	
def H2(jobs, M):

	"""
	Entrada:Colecci√≥n de trabajos A[0‚Ä¶I) y N√∫mero de m√°quinas.
	Salida: Secuencia de la m√°xima cantidad de trabajos de A[0‚Ä¶I) que no violan el plazo l√≠mite de entrega en su respectiva m√°quina, 
			lista de rechazados y lista de imposibles.
	"""
	###Initialize
	N= len(jobs)
	schedules=[[] for _ in range(M)]
	unscheduled,rejected,impossible = [],[],[]

	"""
	Si el tiempo de procesamiento de los trabajos es mayor a su plazo de entrega, tal que pi>di estos se ubican en la lista de imposibles.
	De lo contrario, son a√±adidos a la lista de unscheduled. 
	"""	
	for i in range(len(jobs)):
		if(jobs[i][2]>jobs[i][1]):
			impossible.append(jobs[i])
		else:
			unscheduled.append(jobs[i])
	###Initialize
	###H2
	for k in range(M):
		"""
		Agendar en la secuencia de la m√°quina los trabajos pertenecientes a la lista de no agendados y organizarlos de acuerdo a su
		plazo de entrega (EDD)
		"""
		schedules[k]=unscheduled
		unscheduled =[]
		schedules[k].sort(key = lambda x: (x[1],x[2]))
		ans= firstLate(schedules[k])
		"""
		Si en la secuencia de la m√°quina se encuentra un trabajo Jq que viola su plazo de entrega, revisar la secuencia desde la
		posici√≥n inicial hasta el incumplimiento de la restricci√≥n J1 ‚Ä¶Jq (ans+1), encontrar el trabajo con un tiempo de procesamiento
		mayor Jmax dentro de esta subsecuencia, removerlo de la secuencia actual y a√±adirlo a la lista de no agendados.
		(Continuar realizando esta acci√≥n hasta que no existan m√°s trabajos que sobrepasen su plazo de entrega).
		"""
		while(ans != None):
			maxPi=nINF
			for i in range(ans+1):
				if(maxPi<schedules[k][i][2]):
					maxPi=schedules[k][i][2]
					jMax=schedules[k][i]
			schedules[k].remove(jMax)
			unscheduled.append(jMax)
			ans= firstLate(schedules[k])
		
		#Si la lista de no agendados no se encuentra vac√≠a œÄ‚â†√ò y a√∫n no han sido revisadas todas las m√°quinas
		if((k<M-1) and (len(unscheduled)!=0)):
			ans2 = [ None for _ in schedules[k]]
			f = 0
			#Calculo de tiempo de inicio de cada trabajo j‚ààœÉk de la m√°quina k 
			for l in range(len(schedules[k])):
				ans2[l] = (f, f+schedules[k][l][2])
				f += schedules[k][l][2]
			#Calculo del tiempo m√≠nimo de inactividad œàj del trabajo j (minSlack) en la m√°quina k como es propuesto mediante (9)
			minSlack = [ INF for _ in schedules[k]]
			for q in range(len(schedules[k])-1):
				for r in range(q+1,len(schedules[k])):
					minSlack[q]= min(minSlack[q], schedules[k][r][1]-ans2[r][1])
			"""
			Sea j=0 el primer trabajo en œÉk (schedules) e i=0 el primer trabajo en ùúã (unscheduled), se calcula el tiempo de inicio bj, 
			tiempo de inactividad [œï(Sk)]j y tiempo m√≠nimo de inactividad œàj de cada trabajo j‚ààœÉk de la m√°quina k.
			"""
			for j in range(len(schedules[k])):
				for i in range(len(unscheduled)):
					ans=computeValues(schedules[k], j, ans2, minSlack)
					dj, pj=schedules[k][j][1], schedules[k][j][2]
					di, pi= unscheduled[i][1], unscheduled[i][2]
					bj, minimumSlack, slackJob = ans
					jobCnt=len(schedules[k])
					"""
					Se verifica el cumplimiento de las condiciones propuestas por Ho y Chang. De cumplirse con las mismas se
					intercambia el trabajo j‚ààœÉk de la m√°quina k por el trabajo i‚ààœÄ de la lista de no agendados y se calcula 
					nuevamente el tiempo de inicio bj y tiempo m√≠nimo de inactividad œàj de cada trabajo j‚ààœÉk de la m√°quina k.
					"""
					if(checkC1(di, bj, pi) and checkC2(minimumSlack, pi, pj) and (checkC3a(slackJob, di, bj, pi) or (False not in checkC3b(di, dj, pi, pj, jobCnt, j)))):
						aux = schedules[k][j]
						schedules[k][j]= unscheduled[i] ##Swap
						unscheduled[i]= aux
						if(j==0):
							f=0
						else:
							f=ans2[j-1][1]
						for l in range(j, len(schedules[k])):
							ans2[l] = (f, f+schedules[k][l][2])
							f += schedules[k][l][2]
						for q in range(len(schedules[k])-1):
							for r in range(q+1,len(schedules[k])):
								minSlack[q]= min(minSlack[q], schedules[k][r][1]-ans2[r][1])
						#print("Hubo un swap de:", schedules[k][j], unscheduled[i])
						#print("-------------------------------------------")
	rejectedJobs=unscheduled
	print("Execution time", time.time()-start)
	#Impresi√≥n de resultados
	for i in schedules:
		for j in i:
			print(j[0])
		print()
	t=0
	for i in range(len(schedules)):
		for j in range(len(schedules[i])):
			t+=1
	print(t)				
	###H2
	return [schedules, rejected, impossible]
def main():
	"""
	Entrada:Colecci√≥n de trabajos A[0‚Ä¶I), I‚â•0 tal que A[i] contiene la tupla (Ji,di,pi) indicando el nombre, plazo m√°ximo 
			de entrega y tiempo de procesamiento del trabajo i, 0‚â§i‚â§I, respectivamente; N√∫mero de m√°quinas M.
	Salida:Secuencia de la m√°xima cantidad de trabajos de A[0‚Ä¶I) a ser procesados en cada m√°quina que no violan el 
			plazo l√≠mite de entrega; Trabajos rechazados e imposibles.
	"""
	M=2
	jobs=[]
	n=50
	for i in range(n+1):
		if (i==0):
			nada=input()
		else:
			Ji,di,pi=input().strip().split(";")
			jobs.append([Ji,float(di),float(pi)])
	schedules, rejected, impossible = H2(jobs, M)
main()
